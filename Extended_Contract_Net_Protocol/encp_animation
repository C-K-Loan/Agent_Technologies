from tkinter import *
import encp_agent as agent
from encp_agent import Agent
import encp_manager as manager
from encp_manager import Encp_manager
import tkinter as tk
from encp_simulation import init_world

#for agent in Agent.instances:

#for manager in Encp_manager.instances

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        agent_count = Agent.id_counter
        t = SimpleTable(self, 10,agent_count+2)#
        t.pack(side="top", fill="x")
#
class SimpleTable(tk.Frame):
    def __init__(self, parent, rows=10, columns=2):
        # use black background so it "peeks through" to 
        # form grid lines
        tk.Frame.__init__(self, parent, background="black")
        self._widgets = []
        
        
        #generate heading
        current_row = []
        label = tk.Label(self,text="Iteration",borderwidth=10, width=25)
        label.grid(row=0, column=0, sticky="nsew", padx=1, pady=1)
        current_row.append(label)

        #GEN MORE HEADING
        for agent_it in Agent.instances:
            label = tk.Label(self,text="AGENT ID: " + str(agent_it.id),borderwidth=10, width=25)
            label.grid(row=0, column=agent_it.id+1, sticky="nsew", padx=1, pady=1)
            current_row.append(label)
        
        self._widgets.append(current_row)


#gen more heading
        
        current_row = []
        label = tk.Label(self,text="ENCP MANAGER ID: "+str("MANAGERID??"),borderwidth=10, width=25)
        label.grid(row=0, column=Agent.id_counter+2, sticky="nsew", padx=1, pady=1)
        current_row.append(label)
        self._widgets.append(current_row)




        current_row = []


            # Dictionary for Key:Agent Value:Tuple (BID,ID of agent)
        #fill rows >0 with bid values and reaction of encp manager
        i=0
        for manager_it in Encp_manager.instances:
            #iteration num
            label_it_num = tk.Label(self,text="#"+ str(i),borderwidth=10, width=25)
            label_it_num.grid(row=1, column=0, sticky="nsew", padx=1, pady=1)
            current_row.append(label)

            for agent_it in Agent.instances:
                print(str(manager_it.bids[agent_it]))
                label = tk.Label(self,text="Pre Bid: "+ str(manager_it.bids[agent_it][0]),borderwidth=10, width=25)
                label.grid(row=1, column=agent_it.id+1, sticky="nsew", padx=1, pady=1)
                current_row.append(label)


        self._widgets.append(current_row)

    def set(self, row, column, value):
        widget = self._widgets[row][column]
        widget.configure(text=value)

#generate one row, except encp reacitons
#generate all the bids
    def render_bids(self,manager_to_render):
        current_row = []
        for agent_it in Agent.instances:
            label = tk.Label(self,text="Pre Bid: "+ str(manager_to_render.bids[agent][0]),borderwidth=10, width=25)
            label.grid(row=1, column=agent.id+1, sticky="nsew", padx=1, pady=1)
            current_row.append(label)
        self._widgets.append(current_row)

"""            
        for row in range(rows):
            i=i+1
            current_row = []
            for column in range(columns):
                label = tk.Label(self, text="hello"+str(i),borderwidth=0, width=10)
                label.grid(row=row, column=column, sticky="nsew", padx=1, pady=1)
                current_row.append(label)
            self._widgets.append(current_row)

        for column in range(columns):
            self.grid_columnconfigure(column, weight=1)

"""


init_world(h,w)
agent_count = Agent.id_counter
#print("ID COUNTER IS "+ str(agent_count))
app = ExampleApp()
app.mainloop()
